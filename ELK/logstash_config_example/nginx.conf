input {
  file {
    mode => "read"
    exclude => "*.gz"
    file_completed_action => "delete"
    type => "prod"
    path => [ "/var/*paths*", "*paths*" ]
    start_position => beginning
  }

  file {
    mode => "read"
    exclude => "*.gz"
    file_completed_action => "delete"
    type => "test"
    path => [ "/var/*paths*", "/var/*paths*" ]
    start_position => beginning
  }
}

filter {
  mutate {add_field => {"logpath" => "%{path}"}}

  if "nginx/access" in [path] {
    mutate {add_tag => [ "nginx_access" ]}
    grok {
      match => { "message" => "%{IPORHOST:remote_addr} - %{DATA:remote_user} \[%{HTTPDATE:timestamp}\] \"%{DATA:request}\" %{INT:status} %{NUMBER:bytes_sent} \"%{DATA:http_referer}\" \"%{DATA:http_user_agent}\" \"%{DATA:gzip_ratio}\"" }
      match => { "message" => "%{IPORHOST:remote_addr} - %{DATA:remote_user} \[%{HTTPDATE:timestamp}\] \"%{DATA:request}\" %{INT:status} %{NUMBER:bytes_sent} \"%{GREEDYDATA:http_referer}" }
      match => { "message" => "%{IPORHOST:remote_addr} - %{DATA:remote_user} \[%{HTTPDATE:timestamp}\] \"%{GREEDYDATA:request}" }
    }

    date {
      match => ["timestamp", "dd/MMM/YYYY:HH:mm:ss Z"]
      target => "@timestamp"
    }
  } else if "nginx/error" in [path]{
    mutate {add_tag => [ "nginx_error" ]}
    grok {
      match => { "message" => "(?<timestamp>%{YEAR}[./]%{MONTHNUM}[./]%{MONTHDAY} %{TIME}) \[%{LOGLEVEL:log_level}\] %{DATA:body_msg}, client: %{IP:client}, server: %{DATA:server}, request: %{QS:request}, upstream: %{QS:upstream}, host: %{QS:host}, referrer: %{QS:referrer}"}
      match => { "message" => "(?<timestamp>%{YEAR}[./]%{MONTHNUM}[./]%{MONTHDAY} %{TIME}) \[%{LOGLEVEL:log_level}\] %{DATA:body_msg}, client: %{IP:client}, server: %{DATA:server}, request: %{QS:request}, upstream: %{QS:upstream}, host: %{QS:host}"}
      match => { "message" => "(?<timestamp>%{YEAR}[./]%{MONTHNUM}[./]%{MONTHDAY} %{TIME}) \[%{LOGLEVEL:log_level}\] %{DATA:body_msg}, client: %{IP:client}, server: %{DATA:server}, request: %{QS:request}, host: %{QS:host}, referrer: %{QS:referrer}"}
      match => { "message" => "(?<timestamp>%{YEAR}[./]%{MONTHNUM}[./]%{MONTHDAY} %{TIME}) \[%{LOGLEVEL:log_level}\] %{DATA:body_msg}, client: %{IP:client}, server: %{DATA:server}, request: %{QS:request}, host: %{QS:host}"}
      match => { "message" => "(?<timestamp>%{YEAR}[./]%{MONTHNUM}[./]%{MONTHDAY} %{TIME}) \[%{LOGLEVEL:log_level}\] %{GREEDYDATA:body_msg}"}
    } 

    mutate {
     uppercase => [ "log_level" ]
    }

    date {
      match => ["timestamp", "yyyy/MM/dd HH:mm:ss"]
      target => "@timestamp"
    }
  } else { 
    mutate {
      add_field => {"conf_message" => "log not recognized, look file name in logpath"}
      add_tag => [ "_grokparsefailure" ]
    }
  }

  if "200" in [status] {
    drop {}
  }

  if "_dateparsefailure" not in [tags] or "_grokparsefailure" not in [tags] or "_jsonparsefailure" not in [tags]{
    mutate {
      remove_field => [ "message" ]
      remove_field => "timestamp" 
    }
  }
}

output {
  if "_dateparsefailure" in [tags] or "_grokparsefailure" in [tags] or "_jsonparsefailure" in [tags] {
    elasticsearch {
      hosts => ["http://localhost:9200"]
      index => "failure-%{+YYYY.MM.dd}"
      user => logstash_writer
      password => "${es_pwd}"
    }
  } else if [type] == "prod" {
    elasticsearch {
      hosts => ["http://localhost:9200"]
      index => "prod-%{+YYYY.MM}"
      user => logstash_writer
      password => "${es_pwd}"
    }
  } else if [type] == "test" {
      elasticsearch {
      hosts => ["http://localhost:9200"]
      index => "test-%{+YYYY.MM}"
      user => logstash_writer
      password => "${es_pwd}"
    }
  }
}