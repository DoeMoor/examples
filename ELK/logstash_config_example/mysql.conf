input {
  file {
    mode => "read"
    exclude => "*.gz"
    file_completed_action => "delete"
    type => "prod"
    path => "/var/*paths*"
    codec => multiline {
      pattern => "^# Time:"
      negate => true
      what => "previous"
      max_lines => 30000
    }
  }

  file {
    mode => "read"
    exclude => "*.gz"
    file_completed_action => "delete"
    type => "test"
    path => "/var/*paths*"
    codec => multiline {
      pattern => "^# Time:"
      negate => true
      what => "previous"
      max_lines => 30000
    }
  }

  file {
    mode => "read"
    exclude => "*.gz"
    file_completed_action => "delete"
    type => "prod"
    path => "/var/*paths*"
    codec => multiline {
      pattern => "%{TIMESTAMP_ISO8601} "
      negate => true
      what => "previous"
    }
  }

  file {
    mode => "read"
    exclude => "*.gz"
    file_completed_action => "delete"
    type => "test"
    path => "/var/*paths*"
    codec => multiline {
      pattern => "%{TIMESTAMP_ISO8601} "
      negate => true
      what => "previous"
    }
  }
}

filter {

  if "Closing connection com.mysql.jdbc.JDBC4Connection" in [message] {
    drop {}
  }

  mutate {add_field => {"logpath" => "%{path}"}}

  if "slow" in [path] {

    mutate {add_tag => [ "slow-log" ]}

    grok {
      match => { "message" => "User@Host: %{DATA:User@Host}  Id:.*%{NUMBER:Id}.*Query_time: %{NUMBER:Query_time}.*Lock_time: %{NUMBER:Lock_time} Rows_sent: %{NUMBER:Rows_sent}.*Rows_examined: %{NUMBER:Rows_examined}.*SET timestamp=%{NUMBER:timestamp}%{GREEDYDATA:Query}"}
      match => { "message" => "User@Host: %{DATA:User@Host} .*?Id: %{NUMBER:Id} .*?Query_time: %{NUMBER:Query_time} .*?Lock_time: %{NUMBER:Lock_time} .*?Rows_sent: %{NUMBER:Rows_sent} .*?Rows_examined: %{NUMBER:Rows_examined} .*?SET timestamp=%{NUMBER:timestamp}%{GREEDYDATA:Query}"}
    }

    date {
      match => [ "timestamp", "UNIX" ]
    }
  } else if "mysqld" in [path] {

    mutate {add_tag => [ "mysqld" ]}
    
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{NUMBER:ID} \[%{DATA:log_level}\] %{GREEDYDATA:body_msg}"}
    }

    mutate {
     uppercase => [ "log_level" ]
    }

    date { 
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss" ]
      target => "@timestamp"
    }
  } else { 
    mutate {
      add_field => {"conf_message" => "log not recognized, look file name in logpath"}
      add_tag => [ "_grokparsefailure" ]
    }
  }

  if "_dateparsefailure" not in [tags] or "_grokparsefailure" not in [tags] or "_jsonparsefailure" not in [tags] {
    mutate {
      remove_field => [ "message" ]
      remove_field => "timestamp" 
    }
  }

}

output {
  if "_dateparsefailure" in [tags] or "_grokparsefailure" in [tags] or "_jsonparsefailure" in [tags] {
    elasticsearch {
      hosts => ["http://localhost:9200"]
      index => "failure-%{+YYYY.MM.dd}"
      user => logstash_writer
      password => "${es_pwd}"
    }
  } else if [type] == "prod" {
    elasticsearch {
      hosts => ["http://localhost:9200"]
      index => "prod-%{+YYYY.MM}"
      user => logstash_writer
      password => "${es_pwd}"
    }
  } else if [type] == "test" {
      elasticsearch {
      hosts => ["http://localhost:9200"]
      index => "test-%{+YYYY.MM}"
      user => logstash_writer
      password => "${es_pwd}"
    }
  }
}