input {
  file {
    mode => "read"
    exclude => "*.gz"
    file_completed_action => "delete"
    codec => plain {charset => "UTF-8"}
    type => "prod"
    path => ["/var/*paths*","/var/*paths*", "/var/*paths*"]
    start_position => beginning
  }

  file {
    mode => "read"
    exclude => "*.gz"
    file_completed_action => "delete"
    codec => plain {charset => "UTF-8"}
    type => "test"
    path => ["/var/*paths*","/var/*paths*", "/var/*paths*", "/var/*paths*","/var/*paths*"]
    start_position => beginning
  }
}


filter {
  mutate {add_field => {"logpath" => "%{path}"}}

  if "cron" in [path] {

    mutate {add_tag => [ "cron" ]}

    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{IPORHOST:host} %{PROG:program}(?:\[%{POSINT:pid}\])?: \(%{USER:user}\) %{GREEDYDATA:body_msg}"}
      match => { "message" => "%{CISCOTIMESTAMP:timestamp} %{IPORHOST:host} %{PROG:program}\(%{DATA:path}\)(?:\[%{POSINT:pid}\])?:(?:\(%{USER:user}\))? %{GREEDYDATA:body_msg}"}
      match => { "message" => "%{SYSLOGLINE}"}
    }
  } else if "yum" in [path] {

    mutate {add_tag => [ "yum" ]}

    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{WORD:action}: %{GREEDYDATA:pkg_name}"}
      match => { "message" => "%{SYSLOGLINE}"}
    }
  } else if "secure" in [path] {

    mutate {add_tag => [ "secure" ]}

    grok {
      match => { "message" => "%{SYSLOGLINE}"}
    }
  } else if "maillog" in [path] {

    mutate {add_tag => [ "maillog" ]}

    grok {
      match => { "message" => "%{SYSLOGLINE}"}
    }
  } else if "messages" in [path] {

    mutate {add_tag => [ "messages" ]}

    grok {
      match => { "message" => "%{SYSLOGLINE}"}
    }
  } else { 
    mutate {
      add_field => {"conf_message" => "log not recognized, look file name in logpath"}
      add_tag => [ "_grokparsefailure" ]
    }
  }

  date {
    match => ["timestamp", "MMM d HH:mm:ss","MMM dd HH:mm:ss","MMM  d HH:mm:ss"]
    target => "@timestamp"
  }

    if "_dateparsefailure" not in [tags] or "_grokparsefailure" not in [tags] or "_jsonparsefailure" not in [tags] {
    mutate {
      remove_field => "timestamp" 
    }
  }
}

output {
  if "_dateparsefailure" in [tags] or "_grokparsefailure" in [tags] or "_jsonparsefailure" in [tags] {
    elasticsearch {
      hosts => ["http://localhost:9200"]
      index => "failure-%{+YYYY.MM.dd}"
      user => logstash_writer
      password => "${es_pwd}"
    }
  } else if [type] == "prod" {
    elasticsearch {
      hosts => ["http://localhost:9200"]
      index => "prod-%{+YYYY.MM}"
      user => logstash_writer
      password => "${es_pwd}"
    }
  } else if [type] == "test" {
      elasticsearch {
      hosts => ["http://localhost:9200"]
      index => "test-%{+YYYY.MM}"
      user => logstash_writer
      password => "${es_pwd}"
    }
  }
}